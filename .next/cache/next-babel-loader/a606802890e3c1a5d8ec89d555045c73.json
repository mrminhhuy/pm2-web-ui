{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport axios from 'axios';\nimport LoginPage from '../components/LoginPage';\nexport var withAuth = function withAuth(Component) {\n  function login(props) {\n    var isMounted = useRef(true);\n\n    var _useState = useState(null),\n        error = _useState[0],\n        setError = _useState[1];\n\n    var dispatch = useDispatch();\n\n    var _useSelector = useSelector(function (state) {\n      return {\n        authSynced: state.authSynced,\n        client: state.client\n      };\n    }, shallowEqual),\n        authSynced = _useSelector.authSynced,\n        client = _useSelector.client;\n\n    useEffect(function () {\n      if (!authSynced) {\n        axios.get('/api/me').then(function (_ref) {\n          var user = _ref.data.user;\n          return isMounted && dispatch({\n            type: 'auth',\n            client: user\n          });\n        })[\"catch\"](function (err) {\n          var _err$response, _err$response$data, _err$response$statusT;\n\n          if (!isMounted) {\n            return;\n          }\n\n          var msg = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message;\n          setError(msg ? [(_err$response$statusT = err.response.statusText) !== null && _err$response$statusT !== void 0 ? _err$response$statusT : 'Error', msg] : ['Error', err.toString()]);\n        });\n      }\n    }, [authSynced]);\n    return client ? __jsx(Component, props) : __jsx(LoginPage, _extends({}, props, {\n      isLoading: !authSynced && !error,\n      error: error\n    }));\n  }\n\n  ;\n  return login;\n};","map":null,"metadata":{},"sourceType":"module"}