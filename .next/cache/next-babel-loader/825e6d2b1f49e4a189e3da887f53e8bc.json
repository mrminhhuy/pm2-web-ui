{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport database from './database';\nimport method from './method';\nimport session from './session';\nimport authenticate from './authenticate';\nimport pm2 from './pm2';\nexport { database, method, session, authenticate, pm2 };\n\nconst handleExceptions = fn => {\n  return async (req, res) => {\n    try {\n      await fn(req, res);\n    } catch (err) {\n      var _err$status, _err$message;\n\n      const responded = res._headerSent;\n      const status = (_err$status = err.status) !== null && _err$status !== void 0 ? _err$status : 500;\n      const message = (_err$message = err.message) !== null && _err$message !== void 0 ? _err$message : err.toString();\n\n      if (!responded) {\n        res.status(status).json({\n          message\n        });\n      }\n\n      if (!status) {\n        console.error(err);\n      }\n    }\n  };\n};\n\nexport class RequestError extends Error {\n  constructor(message, status = 500) {\n    super();\n\n    _defineProperty(this, \"message\", void 0);\n\n    _defineProperty(this, \"status\", void 0);\n\n    this.message = message;\n    this.status = status;\n  }\n\n}\n;\nexport const combine = (...fns) => {\n  const len = fns.length;\n  let fn = fns[len - 1];\n\n  if (len > 1) {\n    for (let i = len - 2; i >= 0; i--) {\n      fn = fns[i](fn);\n    }\n  }\n\n  return handleExceptions(fn);\n};","map":null,"metadata":{},"sourceType":"module"}