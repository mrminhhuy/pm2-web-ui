{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport database from './database';\nimport method from './method';\nimport session from './session';\nimport authenticate from './authenticate';\nimport pm2 from './pm2';\nexport { database, method, session, authenticate, pm2 };\n\nvar handleExceptions = function handleExceptions(fn) {\n  return function _callee(req, res) {\n    var _err$status, _err$message, responded, status, message;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fn(req, res));\n\n          case 3:\n            _context.next = 12;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            responded = res._headerSent;\n            status = (_err$status = _context.t0.status) !== null && _err$status !== void 0 ? _err$status : 500;\n            message = (_err$message = _context.t0.message) !== null && _err$message !== void 0 ? _err$message : _context.t0.toString();\n\n            if (!responded) {\n              res.status(status).json({\n                message: message\n              });\n            }\n\n            if (!status) {\n              console.error(_context.t0);\n            }\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n};\n\nexport var RequestError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(RequestError, _Error);\n\n  var _super = _createSuper(RequestError);\n\n  function RequestError(message) {\n    var _this;\n\n    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n\n    _classCallCheck(this, RequestError);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"message\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", void 0);\n\n    _this.message = message;\n    _this.status = status;\n    return _this;\n  }\n\n  return RequestError;\n}(\n/*#__PURE__*/\n_wrapNativeSuper(Error));\n;\nexport var combine = function combine() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  var len = fns.length;\n  var fn = fns[len - 1];\n\n  if (len > 1) {\n    for (var i = len - 2; i >= 0; i--) {\n      fn = fns[i](fn);\n    }\n  }\n\n  return handleExceptions(fn);\n};","map":null,"metadata":{},"sourceType":"module"}