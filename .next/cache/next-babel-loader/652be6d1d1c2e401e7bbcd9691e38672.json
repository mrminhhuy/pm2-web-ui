{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport moment from 'moment';\nimport Router from 'next/router';\nimport ErrorDisplay from './ErrorDisplay';\nimport { AppStatus, ExecMode } from '../../shared/pm2';\nimport ClusterIcon from './ClusterIcon';\nimport WatchIcon from './WatchIcon';\nimport TableHead from './TableHead';\n\nfunction TableCell(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return __jsx(\"td\", props, children);\n}\n\n;\n\nconst getTextContent = children => {\n  let text = '';\n\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  for (let i = 0; i < children.length; i++) {\n    const c = children[i];\n\n    if (c === undefined || c === null) {\n      continue;\n    }\n\n    if (Array.isArray(c)) {\n      text += getTextContent(c);\n    }\n\n    if (typeof c === 'object') {\n      var _c$props;\n\n      text += getTextContent((_c$props = c.props) === null || _c$props === void 0 ? void 0 : _c$props.children);\n      continue;\n    }\n\n    text += c;\n  }\n\n  ;\n  return text;\n};\n\nconst functionalCell = id => {\n  return function (_ref2) {\n    let {\n      children\n    } = _ref2,\n        props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n    const attr = {\n      onClick: () => Router.push(`/apps/[id]`, `/apps/${id}`),\n      onContextMenu: e => {\n        const textToCopy = getTextContent(children);\n        e.preventDefault();\n        navigator.clipboard.writeText(textToCopy).catch(console.log);\n      },\n      style: {\n        cursor: 'pointer'\n      }\n    };\n    return __jsx(TableCell, _extends({}, attr, props), children);\n  };\n};\n\nconst statusIcon = {\n  [AppStatus.ONLINE]: () => __jsx(\"span\", {\n    className: \"icon is-pulled-right\",\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-play has-text-success\"\n  })),\n  [AppStatus.STOPPING]: () => __jsx(\"span\", {\n    className: \"icon is-pulled-right\",\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-stop-circle\"\n  })),\n  [AppStatus.STOPPED]: () => __jsx(\"span\", {\n    className: \"icon is-pulled-right\",\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-stop\"\n  })),\n  [AppStatus.LAUNCHING]: () => __jsx(\"span\", {\n    className: \"icon is-pulled-right\",\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-rocket has-text-primary\"\n  })),\n  [AppStatus.ERRORED]: () => __jsx(\"span\", {\n    className: \"icon is-pulled-right\",\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-exclamation-triangle has-text-danger\"\n  })),\n  [AppStatus.ONE_LAUNCH]: () => __jsx(\"span\", {\n    className: \"icon is-pulled-right\",\n    style: {\n      marginLeft: '10px'\n    }\n  }, __jsx(\"i\", {\n    className: \"fas fa-asterisk\"\n  }))\n};\nconst bytesInMb = 1024 ** 2;\n\nfunction ApplicationRow({\n  app,\n  isFirst = false\n}) {\n  const {\n    pid,\n    pm_id: id,\n    name,\n    monit,\n    pm2_env\n  } = app;\n  const {\n    memory,\n    cpu\n  } = monit;\n  const {\n    watch,\n    restart_time: restarts,\n    unstable_restarts: unstableRestarts,\n    pm_uptime: uptime,\n    status,\n    exec_mode: execMode\n  } = pm2_env;\n  const icon = statusIcon[status] ? statusIcon[status]() : null;\n  const mup = moment(uptime);\n  const Td = functionalCell(name);\n  const details = `${name}\\npid: ${pid}`;\n\n  const postfix = __jsx(React.Fragment, null, execMode === ExecMode.CLUSTER ? __jsx(React.Fragment, null, ` (${pid})`, __jsx(ClusterIcon, null)) : null, watch ? __jsx(WatchIcon, null) : null);\n\n  return __jsx(\"tr\", null, __jsx(Td, null, id), __jsx(Td, {\n    className: `has-tooltip-${isFirst ? 'right' : 'top'}`,\n    \"data-tooltip\": details\n  }, name, postfix), __jsx(Td, null, icon, status), __jsx(Td, {\n    \"data-tooltip\": mup.calendar()\n  }, mup.fromNow(true)), __jsx(Td, null, restarts, unstableRestarts > 0 ? [' + ', __jsx(\"b\", {\n    key: \"unstable-restarts\",\n    className: \"has-text-danger has-tooltip-danger\",\n    \"data-tooltip\": `this application had ${unstableRestarts} unstable restart${unstableRestarts != 1 ? 's' : ''}`\n  }, unstableRestarts)] : null), __jsx(Td, null, (memory / bytesInMb).toFixed(2), \"mb\"), __jsx(Td, null, cpu, \"%\"));\n}\n\n;\n\nfunction LoadingBar() {\n  return __jsx(\"progress\", {\n    className: \"progress is-small is-info\",\n    max: \"100\"\n  }, \"Loading...\");\n}\n\nfunction EmptyTable() {\n  return __jsx(\"div\", {\n    style: {\n      textAlign: 'center',\n      width: '100%',\n      padding: '10px'\n    }\n  }, __jsx(\"p\", {\n    className: \"subtitle\"\n  }, \"There are no applications.\"));\n}\n\nexport default function (props) {\n  const {\n    apps = [],\n    isLoading = false,\n    error = null\n  } = props;\n\n  if (error) {\n    var _ref3, _error$response, _ref4, _error$response2, _error$response2$data;\n\n    const title = (_ref3 = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusText) !== null && _ref3 !== void 0 ? _ref3 : 'Error';\n    const text = (_ref4 = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) !== null && _ref4 !== void 0 ? _ref4 : error.toString();\n    return __jsx(ErrorDisplay, {\n      title: title,\n      text: text,\n      style: {\n        width: '100%'\n      }\n    });\n  }\n\n  if (isLoading) {\n    return __jsx(LoadingBar, null);\n  }\n\n  if (apps.length === 0) {\n    return __jsx(EmptyTable, null);\n  }\n\n  const rows = apps.map((app, index) => __jsx(ApplicationRow, {\n    key: `app_row_${app.pid}`,\n    app: app,\n    isFirst: index === 0\n  }));\n  return __jsx(\"div\", {\n    className: \"table-container\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(\"table\", {\n    className: \"table is-fullwidth is-bordered is-striped is-hoverable\"\n  }, __jsx(TableHead, {\n    columns: ['id', 'name', 'status', 'uptime', 'restarts', 'memory', 'cpu']\n  }), __jsx(\"tbody\", null, rows)));\n}\n;","map":null,"metadata":{},"sourceType":"module"}