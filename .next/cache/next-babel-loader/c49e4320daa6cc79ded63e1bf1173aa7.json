{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport useSWR from 'swr';\nimport { fetcher } from '../../client/util';\nimport { withRedux } from '../../client/middlewares/redux';\nimport { withAuth } from '../../client/middlewares/auth';\nimport axios from 'axios';\nimport Layout from '../../client/components/Layout';\nimport StartButton from '../../client/components/apps/StartButton';\nimport RestartButton from '../../client/components/apps/RestartButton';\nimport DeleteButton from '../../client/components/apps/DeleteButton';\nimport Panel from '../../client/components/Panel';\nimport ErrorDisplay from '../../client/components/ErrorDisplay';\nimport { AppStatus, ExecMode } from '../../shared/pm2';\nimport { AppAction } from '../../shared/actions';\nimport ReloadButton from '../../client/components/apps/ReloadButton';\nimport ClusterIcon from '../../client/components/ClusterIcon';\nimport InstancesList from '../../client/components/apps/InstancesList';\nimport { UserAppRight } from '../../shared/user';\nexport default withRedux(withAuth(function () {\n  var _ref3, _client$apps$find, _instances$;\n\n  var isMounted = useRef(true);\n  var client = useSelector(function (state) {\n    return state.client;\n  });\n\n  var _useState = useState(false),\n      isWaiting = _useState[0],\n      setWaiting = _useState[1];\n\n  var _useState2 = useState(null),\n      warning = _useState2[0],\n      setWarning = _useState2[1];\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useSWR = useSWR(\"/api/apps/\".concat(id), fetcher, {\n    refreshInterval: 3000\n  }),\n      data = _useSWR.data,\n      error = _useSWR.error,\n      isValidating = _useSWR.isValidating,\n      revalidate = _useSWR.revalidate;\n\n  var canUpdate = !isValidating && (data || error);\n\n  if (!data || error) {\n    var _ref, _error$response, _ref2, _error$response2, _error$response2$data;\n\n    return __jsx(Layout, null, __jsx(Panel, {\n      title: id,\n      canUpdate: canUpdate,\n      onUpdate: function onUpdate() {\n        return revalidate();\n      }\n    }, error ? __jsx(ErrorDisplay, {\n      style: {\n        width: '100%'\n      },\n      title: (_ref = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusText) !== null && _ref !== void 0 ? _ref : 'Error',\n      text: (_ref2 = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) !== null && _ref2 !== void 0 ? _ref2 : error.toString()\n    }) : __jsx(\"progress\", {\n      className: \"progress is-small is-info\",\n      max: \"100\"\n    }, \"Loading...\")));\n  }\n\n  var appRights = (_ref3 = (_client$apps$find = client.apps.find(function (a) {\n    return a.id === id;\n  })) === null || _client$apps$find === void 0 ? void 0 : _client$apps$find.right) !== null && _ref3 !== void 0 ? _ref3 : 0;\n  var canManage = client.isAdmin || (appRights & UserAppRight.MANAGE) === UserAppRight.MANAGE;\n  var canDelete = client.isAdmin || (appRights & UserAppRight.DELETE) === UserAppRight.DELETE;\n  var app = data.app;\n  var _ref4 = app,\n      pmId = _ref4.pm_id,\n      name = _ref4.name,\n      execMode = _ref4.exec_mode,\n      instances = _ref4.instances;\n  var status = (_instances$ = instances[0]) === null || _instances$ === void 0 ? void 0 : _instances$.pm2_env.status;\n  var isOnline = status === AppStatus.ONLINE || status === AppStatus.LAUNCHING || status === AppStatus.ONE_LAUNCH;\n  var isCluster = execMode === ExecMode.CLUSTER;\n  var buttonProps = {\n    status: status\n  };\n\n  if (isWaiting) {\n    buttonProps.loading = true;\n  }\n\n  var sendAction = function sendAction(action) {\n    var _ref5, _err$response, _ref6, _err$response2, _err$response2$data;\n\n    return _regeneratorRuntime.async(function sendAction$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setWaiting(true);\n            setWarning(null);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(\"/api/apps/\".concat(name), {\n              action: action\n            }));\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (isMounted) {\n              setWarning([(_ref5 = (_err$response = _context.t0.response) === null || _err$response === void 0 ? void 0 : _err$response.statusText) !== null && _ref5 !== void 0 ? _ref5 : 'Error', (_ref6 = (_err$response2 = _context.t0.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) !== null && _ref6 !== void 0 ? _ref6 : _context.t0.toString()]);\n            }\n\n          case 10:\n            if (!isMounted) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(revalidate());\n\n          case 13:\n            setWaiting(false);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 7]], Promise);\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"container panel is-info\"\n  }, __jsx(\"div\", {\n    className: \"panel-heading\"\n  }, id, isCluster && __jsx(ClusterIcon, {\n    pull: null\n  }), __jsx(\"a\", {\n    className: \"button button-primary is-pulled-right is-light is-outlined \".concat(canUpdate ? '' : 'is-loading'),\n    style: {\n      marginTop: '-6px'\n    },\n    onClick: function onClick() {\n      return revalidate();\n    }\n  }, \"Update\")), __jsx(\"div\", {\n    className: \"panel-block is-block\"\n  }, __jsx(\"style\", null, '.is-inline-flex > button { flex: 1; }'), __jsx(\"div\", {\n    className: \"buttons is-inline-flex\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(StartButton, _extends({}, buttonProps, {\n    disabled: !canManage,\n    onClick: function onClick() {\n      return sendAction(isOnline ? AppAction.STOP : AppAction.START);\n    }\n  })), isCluster && __jsx(ReloadButton, _extends({}, buttonProps, {\n    disabled: !canManage,\n    onClick: function onClick() {\n      return sendAction(AppAction.RELOAD);\n    }\n  })), __jsx(RestartButton, _extends({}, buttonProps, {\n    disabled: !canManage,\n    onClick: function onClick() {\n      return sendAction(AppAction.RESTART);\n    }\n  })), __jsx(DeleteButton, _extends({}, buttonProps, {\n    disabled: !canDelete,\n    onClick: function onClick() {\n      return sendAction(AppAction.DELETE);\n    }\n  })), warning && __jsx(ErrorDisplay, {\n    color: \"is-warning\",\n    style: {\n      width: '100%',\n      marginBottom: '10px'\n    },\n    title: warning[0],\n    text: warning[1]\n  })))), __jsx(InstancesList, {\n    apps: instances\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}