{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useRouter } from 'next/router';\nimport { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport useSWR from 'swr';\nimport { fetcher } from '../../client/util';\nimport { withRedux } from '../../client/middlewares/redux';\nimport { withAuth } from '../../client/middlewares/auth';\nimport axios from 'axios';\nimport Layout from '../../client/components/Layout';\nimport StartButton from '../../client/components/apps/StartButton';\nimport RestartButton from '../../client/components/apps/RestartButton';\nimport DeleteButton from '../../client/components/apps/DeleteButton';\nimport Panel from '../../client/components/Panel';\nimport ErrorDisplay from '../../client/components/ErrorDisplay';\nimport { AppStatus, ExecMode } from '../../shared/pm2';\nimport { AppAction } from '../../shared/actions';\nimport ReloadButton from '../../client/components/apps/ReloadButton';\nimport ClusterIcon from '../../client/components/ClusterIcon';\nimport InstancesList from '../../client/components/apps/InstancesList';\nimport { UserAppRight } from '../../shared/user';\nexport default withRedux(withAuth(function () {\n  var _ref3, _client$apps$find, _instances$;\n\n  const isMounted = useRef(true);\n  const client = useSelector(state => state.client);\n  const {\n    0: isWaiting,\n    1: setWaiting\n  } = useState(false);\n  const {\n    0: warning,\n    1: setWarning\n  } = useState(null);\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    data,\n    error,\n    isValidating,\n    revalidate\n  } = useSWR(`/api/apps/${id}`, fetcher, {\n    refreshInterval: 3000\n  });\n  const canUpdate = !isValidating && (data || error);\n\n  if (!data || error) {\n    var _ref, _error$response, _ref2, _error$response2, _error$response2$data;\n\n    return __jsx(Layout, null, __jsx(Panel, {\n      title: id,\n      canUpdate: canUpdate,\n      onUpdate: () => revalidate()\n    }, error ? __jsx(ErrorDisplay, {\n      style: {\n        width: '100%'\n      },\n      title: (_ref = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusText) !== null && _ref !== void 0 ? _ref : 'Error',\n      text: (_ref2 = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) !== null && _ref2 !== void 0 ? _ref2 : error.toString()\n    }) : __jsx(\"progress\", {\n      className: \"progress is-small is-info\",\n      max: \"100\"\n    }, \"Loading...\")));\n  }\n\n  const appRights = (_ref3 = (_client$apps$find = client.apps.find(a => a.id === id)) === null || _client$apps$find === void 0 ? void 0 : _client$apps$find.right) !== null && _ref3 !== void 0 ? _ref3 : 0;\n  const canManage = client.isAdmin || (appRights & UserAppRight.MANAGE) === UserAppRight.MANAGE;\n  const canDelete = client.isAdmin || (appRights & UserAppRight.DELETE) === UserAppRight.DELETE;\n  const {\n    app\n  } = data;\n  const {\n    pm_id: pmId,\n    name,\n    exec_mode: execMode,\n    instances\n  } = app;\n  const status = (_instances$ = instances[0]) === null || _instances$ === void 0 ? void 0 : _instances$.pm2_env.status;\n  const isOnline = status === AppStatus.ONLINE || status === AppStatus.LAUNCHING || status === AppStatus.ONE_LAUNCH;\n  const isCluster = execMode === ExecMode.CLUSTER;\n  const buttonProps = {\n    status\n  };\n\n  if (isWaiting) {\n    buttonProps.loading = true;\n  }\n\n  const sendAction = async action => {\n    setWaiting(true);\n    setWarning(null);\n\n    try {\n      await axios.post(`/api/apps/${name}`, {\n        action\n      });\n    } catch (err) {\n      if (isMounted) {\n        var _ref4, _err$response, _ref5, _err$response2, _err$response2$data;\n\n        setWarning([(_ref4 = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.statusText) !== null && _ref4 !== void 0 ? _ref4 : 'Error', (_ref5 = (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) !== null && _ref5 !== void 0 ? _ref5 : err.toString()]);\n      }\n    }\n\n    if (isMounted) {\n      await revalidate();\n      setWaiting(false);\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"container panel is-info\"\n  }, __jsx(\"div\", {\n    className: \"panel-heading\"\n  }, id, isCluster && __jsx(ClusterIcon, {\n    pull: null\n  }), __jsx(\"a\", {\n    className: `button button-primary is-pulled-right is-light is-outlined ${canUpdate ? '' : 'is-loading'}`,\n    style: {\n      marginTop: '-6px'\n    },\n    onClick: () => revalidate()\n  }, \"Update\")), __jsx(\"div\", {\n    className: \"panel-block is-block\"\n  }, __jsx(\"style\", null, '.is-inline-flex > button { flex: 1; }'), __jsx(\"div\", {\n    className: \"buttons is-inline-flex\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(StartButton, _extends({}, buttonProps, {\n    disabled: !canManage,\n    onClick: () => sendAction(isOnline ? AppAction.STOP : AppAction.START)\n  })), isCluster && __jsx(ReloadButton, _extends({}, buttonProps, {\n    disabled: !canManage,\n    onClick: () => sendAction(AppAction.RELOAD)\n  })), __jsx(RestartButton, _extends({}, buttonProps, {\n    disabled: !canManage,\n    onClick: () => sendAction(AppAction.RESTART)\n  })), __jsx(DeleteButton, _extends({}, buttonProps, {\n    disabled: !canDelete,\n    onClick: () => sendAction(AppAction.DELETE)\n  })), warning && __jsx(ErrorDisplay, {\n    color: \"is-warning\",\n    style: {\n      width: '100%',\n      marginBottom: '10px'\n    },\n    title: warning[0],\n    text: warning[1]\n  })))), __jsx(InstancesList, {\n    apps: instances\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}