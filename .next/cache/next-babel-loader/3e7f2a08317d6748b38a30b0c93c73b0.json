{"ast":null,"code":"import pm from 'pm2';\nimport { ExecMode } from '../shared/pm2';\nimport _fs from 'fs';\nimport * as bluebird from 'bluebird';\nconst fs = bluebird.promisifyAll(_fs);\nexport const getList = () => new Promise((resolve, reject) => pm.list((err, list) => err ? reject(err) : resolve(list)));\nexport const getApp = async name => {\n  const list = await getList();\n  const apps = [];\n\n  for (let i = 0; i < list.length; i++) {\n    const app = list[i];\n\n    if (app.name != name) {\n      continue;\n    }\n\n    apps.push(app);\n\n    if (app.pm2_env.exec_mode !== ExecMode.CLUSTER) {\n      break;\n    }\n  }\n\n  const temp = apps[0];\n\n  if (!temp) {\n    return null;\n  }\n\n  return {\n    name: temp.name,\n    pm_id: temp.pm_id,\n    exec_mode: temp.pm2_env.exec_mode,\n    instances: apps\n  };\n};\n\nconst getDescription = pmId => new Promise((resolve, reject) => pm.describe(pmId, (err, list) => err ? reject(err) : resolve(list)));\n\nexport const getLogs = async pmId => {\n  const [app] = await getDescription(pmId);\n\n  if (!app) {\n    throw 'Application does not exist.';\n  }\n\n  const {\n    pm_out_log_path,\n    pm_err_log_path\n  } = app.pm2_env;\n  const response = {\n    app,\n    output: pm_out_log_path ? await fs.readFileAsync(pm_out_log_path, 'utf8') : 'There is no log file provided.',\n    error: pm_err_log_path ? await fs.readFileAsync(pm_err_log_path, 'utf8') : 'There is no log file provided.'\n  };\n  return response;\n};\nexport const stopApp = name => new Promise((resolve, reject) => pm.stop(name, err => err ? reject(err) : resolve()));\nexport const restartApp = name => new Promise((resolve, reject) => pm.restart(name, err => err ? reject(err) : resolve()));\nexport const reloadApp = name => new Promise((resolve, reject) => pm.reload(name, err => err ? reject(err) : resolve()));\nexport const deleteApp = name => new Promise((resolve, reject) => pm.delete(name, err => err ? reject(err) : resolve()));","map":null,"metadata":{},"sourceType":"module"}