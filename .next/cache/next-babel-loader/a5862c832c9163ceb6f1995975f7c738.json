{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _actions;\n\nimport { pm2, authenticate, database, session, method, combine, RequestError } from '../../../../server/middlewares';\nimport { getApp, stopApp, deleteApp, reloadApp, restartApp } from '../../../../server/pm2';\nimport { AppAction } from '../../../../shared/actions';\nimport { UserAppRight } from '../../../../shared/user';\n\nvar onGet = function onGet(req, res) {\n  var user, query, id, app;\n  return _regeneratorRuntime.async(function onGet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          user = req.user, query = req.query;\n          id = query.id;\n\n          if (!(!user.isAdmin && !user.hasRight(id, UserAppRight.VIEW))) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new RequestError('You do not have access to this application.', 403);\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getApp(id));\n\n        case 6:\n          app = _context.sent;\n\n          if (app) {\n            _context.next = 9;\n            break;\n          }\n\n          throw new RequestError('This application does not exist.', 404);\n\n        case 9:\n          res.status(200).json({\n            app: app\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar actions = (_actions = {}, _defineProperty(_actions, AppAction.DELETE, {\n  fn: deleteApp,\n  right: UserAppRight.DELETE\n}), _defineProperty(_actions, AppAction.STOP, {\n  fn: stopApp,\n  right: UserAppRight.MANAGE\n}), _defineProperty(_actions, AppAction.RELOAD, {\n  fn: reloadApp,\n  right: UserAppRight.MANAGE\n}), _defineProperty(_actions, AppAction.RESTART, {\n  fn: restartApp,\n  right: UserAppRight.MANAGE\n}), _defineProperty(_actions, AppAction.START, {\n  fn: restartApp,\n  right: UserAppRight.MANAGE\n}), _actions);\n\nvar onPost = function onPost(req, res) {\n  var query, user, action, id, _actions$action, fn, right, _err$message;\n\n  return _regeneratorRuntime.async(function onPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          query = req.query, user = req.user;\n          action = req.body.action;\n          id = query.id;\n          _actions$action = actions[action], fn = _actions$action.fn, right = _actions$action.right;\n\n          if (!(!user.isAdmin && !user.hasRight(id, right))) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new RequestError('You don\\'t have enough permissions to do this.', 403);\n\n        case 6:\n          _context2.prev = 6;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(fn(id));\n\n        case 9:\n          res.status(200).json({});\n          _context2.next = 15;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](6);\n          throw new RequestError((_err$message = _context2.t0.message) !== null && _err$message !== void 0 ? _err$message : _context2.t0.toString());\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[6, 12]], Promise);\n};\n\nvar onRequest = function onRequest(req, res) {\n  return req.method === 'GET' ? onGet(req, res) : onPost(req, res);\n};\n\nexport default combine(method('GET', 'POST'), database, session, authenticate({\n  required: true\n}), pm2, onRequest);","map":null,"metadata":{},"sourceType":"module"}