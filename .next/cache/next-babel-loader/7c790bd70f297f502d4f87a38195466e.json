{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UserModel, User } from '../../server/models/user';\nimport { database, session, method, combine, RequestError } from '../../server/middlewares';\nimport * as validate from '../../shared/validation';\n\nvar login = function login(req, res) {\n  var _req$body, username, password, user;\n\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _req$body = req.body, username = _req$body.username, password = _req$body.password;\n\n          if (validate.all(validate.username(username), validate.password(password))) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new RequestError('Invalid username or password.', 400);\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(UserModel.findOne({\n            username: username,\n            hashedPassword: User.hash(password)\n          }));\n\n        case 5:\n          user = _context.sent;\n\n          if (user) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new RequestError('User with given username and password was not found.', 403);\n\n        case 8:\n          req.session.userId = user._id;\n          res.status(200).json(user.getPublicData());\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default combine(method('POST'), database, session, login);","map":null,"metadata":{},"sourceType":"module"}