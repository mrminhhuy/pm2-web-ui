{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default (function () {\n  for (var _len = arguments.length, allowedMethods = new Array(_len), _key = 0; _key < _len; _key++) {\n    allowedMethods[_key] = arguments[_key];\n  }\n\n  return function (fn) {\n    var methods = {};\n    allowedMethods.forEach(function (m) {\n      return methods[m] = true;\n    });\n    return function _callee(req, res) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (methods[req.method]) {\n                _context.next = 3;\n                break;\n              }\n\n              res.status(404).send('');\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fn(req, res));\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"module"}