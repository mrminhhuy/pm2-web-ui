{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Icon from \"../Icon\";\nconst unknownState = {\n  disabled: true,\n  text: '...',\n  icon: 'fa-bug',\n  color: 'is-danger'\n};\nexport default function (_ref) {\n  let {\n    traits,\n    status,\n    disabled: shouldBeDisabled,\n    loading = false\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"traits\", \"status\", \"disabled\", \"loading\"]);\n\n  const {\n    disabled,\n    text,\n    icon,\n    color\n  } = traits[status] || unknownState;\n  return __jsx(\"button\", _extends({\n    className: `button ${color} ${loading ? 'is-loading' : ''}`,\n    disabled: disabled || loading || shouldBeDisabled\n  }, props), __jsx(Icon, {\n    className: \"is-small\",\n    icon: icon\n  }), __jsx(\"span\", null, text));\n}\n;","map":null,"metadata":{},"sourceType":"module"}