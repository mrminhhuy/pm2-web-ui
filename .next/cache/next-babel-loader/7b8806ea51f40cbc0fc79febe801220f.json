{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { onInput } from '../util';\nimport Router from 'next/router';\nimport Input from './Input';\nimport Navbar from './Navbar';\nimport * as validate from '../../shared/validation';\nimport axios from 'axios';\n\nconst onLogin = async (username, password) => {\n  const {\n    data\n  } = await axios.post('/api/login', {\n    username,\n    password\n  });\n  return data;\n};\n\nfunction LoadingPanel() {\n  return __jsx(\"div\", null, __jsx(Navbar, null), __jsx(\"div\", {\n    className: \"columns is-centered\"\n  }, __jsx(\"div\", {\n    className: \"column is-6-tablet is-5-fullhd\",\n    style: {\n      margin: '40px 25px 20px 25px',\n      textAlign: 'center'\n    }\n  }, __jsx(\"p\", {\n    className: \"subtitle\"\n  }, \"Loading...\"), __jsx(\"progress\", {\n    className: \"progress is-small is-info is-medium\",\n    max: \"100\"\n  }))));\n}\n\nexport default function ({\n  isLoading = false,\n  error = null\n}) {\n  if (isLoading) {\n    return __jsx(LoadingPanel, null);\n  }\n\n  const isMounted = useRef(true);\n  const {\n    0: username,\n    1: setUsername\n  } = useState(null);\n  const {\n    0: password,\n    1: setPassword\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: reqError,\n    1: setError\n  } = useState(null);\n  const {\n    0: validUsername,\n    1: setValidUsername\n  } = useState(true);\n  const {\n    0: validPassword,\n    1: setValidPassword\n  } = useState(true);\n  const dispatch = useDispatch();\n\n  if (username != null) {\n    const isValid = validate.username(username);\n\n    if (isValid != validUsername) {\n      setValidUsername(isValid);\n    }\n  }\n\n  if (password != null) {\n    const isValid = validate.password(password);\n\n    if (isValid != validPassword) {\n      setValidPassword(isValid);\n    }\n  }\n\n  if (error && !reqError) {\n    setError(error);\n  }\n\n  return __jsx(\"div\", null, __jsx(Navbar, null), __jsx(\"div\", {\n    className: \"columns is-centered\"\n  }, __jsx(\"div\", {\n    className: \"column is-4-tablet is-3-fullhd\",\n    style: {\n      margin: '40px 25px 20px 25px',\n      textAlign: 'center'\n    }\n  }, __jsx(\"h1\", {\n    className: \"subtitle\"\n  }, \"Login to continue\"))), __jsx(\"div\", {\n    className: \"columns is-centered\"\n  }, __jsx(\"div\", {\n    className: \"column is-4-tablet is-3-fullhd box\",\n    style: {\n      margin: '10px 25px 25px 25px'\n    }\n  }, __jsx(Input, {\n    id: \"pm2-ui-username\",\n    name: \"Username\",\n    type: \"text\",\n    placeholder: \"Username\",\n    value: username || '',\n    onChange: onInput(setUsername),\n    invalidMessage: \"This username is invalid\",\n    invalid: !validUsername,\n    icon: \"fa-user\"\n  }), __jsx(Input, {\n    id: \"pm2-ui-password\",\n    name: \"Password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    value: password || '',\n    onChange: onInput(setPassword),\n    invalidMessage: \"This password is invalid\",\n    invalid: !validPassword,\n    icon: \"fa-lock\"\n  }), __jsx(\"div\", {\n    className: \"field\"\n  }, __jsx(\"div\", {\n    className: \"control\"\n  }, __jsx(\"button\", {\n    className: `button is-link is-fullwidth ${loading ? 'is-loading' : ''}`,\n    onClick: async () => {\n      if (!validUsername || !validPassword) {\n        return;\n      }\n\n      setLoading(true);\n\n      try {\n        const data = await onLogin(username, password);\n\n        if (isMounted) {\n          dispatch({\n            type: 'auth',\n            client: data\n          });\n          setLoading(false);\n          Router.push('/');\n        }\n      } catch (err) {\n        if (isMounted) {\n          var _err$response, _err$response$data, _err$response$statusT;\n\n          const msg = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message;\n          setLoading(false);\n          setError(msg ? [(_err$response$statusT = err.response.statusText) !== null && _err$response$statusT !== void 0 ? _err$response$statusT : 'Error', msg] : ['Error', err.toString()]);\n        }\n      }\n    }\n  }, \"Login\"))), reqError && __jsx(\"article\", {\n    className: \"message is-danger\"\n  }, __jsx(\"div\", {\n    className: \"message-header\"\n  }, __jsx(\"p\", null, reqError[0]), __jsx(\"button\", {\n    className: \"delete\",\n    \"aria-label\": \"delete\",\n    onClick: () => setError(null)\n  })), __jsx(\"div\", {\n    className: \"message-body\"\n  }, reqError[1])))));\n}\n;","map":null,"metadata":{},"sourceType":"module"}