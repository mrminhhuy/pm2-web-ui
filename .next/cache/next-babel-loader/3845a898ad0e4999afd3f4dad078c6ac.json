{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { onInput } from '../util';\nimport Router from 'next/router';\nimport Input from './Input';\nimport Navbar from './Navbar';\nimport * as validate from '../../shared/validation';\nimport axios from 'axios';\n\nvar onLogin = function onLogin(username, password) {\n  var _ref, data;\n\n  return _regeneratorRuntime.async(function onLogin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.post('/api/login', {\n            username: username,\n            password: password\n          }));\n\n        case 2:\n          _ref = _context.sent;\n          data = _ref.data;\n          return _context.abrupt(\"return\", data);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction LoadingPanel() {\n  return __jsx(\"div\", null, __jsx(Navbar, null), __jsx(\"div\", {\n    className: \"columns is-centered\"\n  }, __jsx(\"div\", {\n    className: \"column is-6-tablet is-5-fullhd\",\n    style: {\n      margin: '40px 25px 20px 25px',\n      textAlign: 'center'\n    }\n  }, __jsx(\"p\", {\n    className: \"subtitle\"\n  }, \"Loading...\"), __jsx(\"progress\", {\n    className: \"progress is-small is-info is-medium\",\n    max: \"100\"\n  }))));\n}\n\nexport default function (_ref2) {\n  var _ref2$isLoading = _ref2.isLoading,\n      isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading,\n      _ref2$error = _ref2.error,\n      error = _ref2$error === void 0 ? null : _ref2$error;\n\n  if (isLoading) {\n    return __jsx(LoadingPanel, null);\n  }\n\n  var isMounted = useRef(true);\n\n  var _useState = useState(null),\n      username = _useState[0],\n      setUsername = _useState[1];\n\n  var _useState2 = useState(null),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(null),\n      reqError = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(true),\n      validUsername = _useState5[0],\n      setValidUsername = _useState5[1];\n\n  var _useState6 = useState(true),\n      validPassword = _useState6[0],\n      setValidPassword = _useState6[1];\n\n  var dispatch = useDispatch();\n\n  if (username != null) {\n    var isValid = validate.username(username);\n\n    if (isValid != validUsername) {\n      setValidUsername(isValid);\n    }\n  }\n\n  if (password != null) {\n    var _isValid = validate.password(password);\n\n    if (_isValid != validPassword) {\n      setValidPassword(_isValid);\n    }\n  }\n\n  if (error && !reqError) {\n    setError(error);\n  }\n\n  return __jsx(\"div\", null, __jsx(Navbar, null), __jsx(\"div\", {\n    className: \"columns is-centered\"\n  }, __jsx(\"div\", {\n    className: \"column is-4-tablet is-3-fullhd\",\n    style: {\n      margin: '40px 25px 20px 25px',\n      textAlign: 'center'\n    }\n  }, __jsx(\"h1\", {\n    className: \"subtitle\"\n  }, \"Login to continue\"))), __jsx(\"div\", {\n    className: \"columns is-centered\"\n  }, __jsx(\"div\", {\n    className: \"column is-4-tablet is-3-fullhd box\",\n    style: {\n      margin: '10px 25px 25px 25px'\n    }\n  }, __jsx(Input, {\n    id: \"pm2-ui-username\",\n    name: \"Username\",\n    type: \"text\",\n    placeholder: \"Username\",\n    value: username || '',\n    onChange: onInput(setUsername),\n    invalidMessage: \"This username is invalid\",\n    invalid: !validUsername,\n    icon: \"fa-user\"\n  }), __jsx(Input, {\n    id: \"pm2-ui-password\",\n    name: \"Password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    value: password || '',\n    onChange: onInput(setPassword),\n    invalidMessage: \"This password is invalid\",\n    invalid: !validPassword,\n    icon: \"fa-lock\"\n  }), __jsx(\"div\", {\n    className: \"field\"\n  }, __jsx(\"div\", {\n    className: \"control\"\n  }, __jsx(\"button\", {\n    className: \"button is-link is-fullwidth \".concat(loading ? 'is-loading' : ''),\n    onClick: function _callee() {\n      var data, _err$response, _err$response$data, _err$response$statusT, msg;\n\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!validUsername || !validPassword)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              setLoading(true);\n              _context2.prev = 3;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(onLogin(username, password));\n\n            case 6:\n              data = _context2.sent;\n\n              if (isMounted) {\n                dispatch({\n                  type: 'auth',\n                  client: data\n                });\n                setLoading(false);\n                Router.push('/');\n              }\n\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](3);\n\n              if (isMounted) {\n                msg = (_err$response = _context2.t0.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message;\n                setLoading(false);\n                setError(msg ? [(_err$response$statusT = _context2.t0.response.statusText) !== null && _err$response$statusT !== void 0 ? _err$response$statusT : 'Error', msg] : ['Error', _context2.t0.toString()]);\n              }\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[3, 10]], Promise);\n    }\n  }, \"Login\"))), reqError && __jsx(\"article\", {\n    className: \"message is-danger\"\n  }, __jsx(\"div\", {\n    className: \"message-header\"\n  }, __jsx(\"p\", null, reqError[0]), __jsx(\"button\", {\n    className: \"delete\",\n    \"aria-label\": \"delete\",\n    onClick: function onClick() {\n      return setError(null);\n    }\n  })), __jsx(\"div\", {\n    className: \"message-body\"\n  }, reqError[1])))));\n}\n;","map":null,"metadata":{},"sourceType":"module"}