{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport pm from 'pm2';\nimport { ExecMode } from '../shared/pm2';\nimport _fs from 'fs';\nimport * as bluebird from 'bluebird';\nvar fs = bluebird.promisifyAll(_fs);\nexport var getList = function getList() {\n  return new Promise(function (resolve, reject) {\n    return pm.list(function (err, list) {\n      return err ? reject(err) : resolve(list);\n    });\n  });\n};\nexport var getApp = function getApp(name) {\n  var list, apps, i, app, temp;\n  return _regeneratorRuntime.async(function getApp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getList());\n\n        case 2:\n          list = _context.sent;\n          apps = [];\n          i = 0;\n\n        case 5:\n          if (!(i < list.length)) {\n            _context.next = 15;\n            break;\n          }\n\n          app = list[i];\n\n          if (!(app.name != name)) {\n            _context.next = 9;\n            break;\n          }\n\n          return _context.abrupt(\"continue\", 12);\n\n        case 9:\n          apps.push(app);\n\n          if (!(app.pm2_env.exec_mode !== ExecMode.CLUSTER)) {\n            _context.next = 12;\n            break;\n          }\n\n          return _context.abrupt(\"break\", 15);\n\n        case 12:\n          i++;\n          _context.next = 5;\n          break;\n\n        case 15:\n          temp = apps[0];\n\n          if (temp) {\n            _context.next = 18;\n            break;\n          }\n\n          return _context.abrupt(\"return\", null);\n\n        case 18:\n          return _context.abrupt(\"return\", {\n            name: temp.name,\n            pm_id: temp.pm_id,\n            exec_mode: temp.pm2_env.exec_mode,\n            instances: apps\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getDescription = function getDescription(pmId) {\n  return new Promise(function (resolve, reject) {\n    return pm.describe(pmId, function (err, list) {\n      return err ? reject(err) : resolve(list);\n    });\n  });\n};\n\nexport var getLogs = function getLogs(pmId) {\n  var _ref, _ref2, app, _app$pm2_env, pm_out_log_path, pm_err_log_path, response;\n\n  return _regeneratorRuntime.async(function getLogs$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getDescription(pmId));\n\n        case 2:\n          _ref = _context2.sent;\n          _ref2 = _slicedToArray(_ref, 1);\n          app = _ref2[0];\n\n          if (app) {\n            _context2.next = 7;\n            break;\n          }\n\n          throw 'Application does not exist.';\n\n        case 7:\n          _app$pm2_env = app.pm2_env, pm_out_log_path = _app$pm2_env.pm_out_log_path, pm_err_log_path = _app$pm2_env.pm_err_log_path;\n          _context2.t0 = app;\n\n          if (!pm_out_log_path) {\n            _context2.next = 15;\n            break;\n          }\n\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(fs.readFileAsync(pm_out_log_path, 'utf8'));\n\n        case 12:\n          _context2.t1 = _context2.sent;\n          _context2.next = 16;\n          break;\n\n        case 15:\n          _context2.t1 = 'There is no log file provided.';\n\n        case 16:\n          _context2.t2 = _context2.t1;\n\n          if (!pm_err_log_path) {\n            _context2.next = 23;\n            break;\n          }\n\n          _context2.next = 20;\n          return _regeneratorRuntime.awrap(fs.readFileAsync(pm_err_log_path, 'utf8'));\n\n        case 20:\n          _context2.t3 = _context2.sent;\n          _context2.next = 24;\n          break;\n\n        case 23:\n          _context2.t3 = 'There is no log file provided.';\n\n        case 24:\n          _context2.t4 = _context2.t3;\n          response = {\n            app: _context2.t0,\n            output: _context2.t2,\n            error: _context2.t4\n          };\n          return _context2.abrupt(\"return\", response);\n\n        case 27:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var stopApp = function stopApp(name) {\n  return new Promise(function (resolve, reject) {\n    return pm.stop(name, function (err) {\n      return err ? reject(err) : resolve();\n    });\n  });\n};\nexport var restartApp = function restartApp(name) {\n  return new Promise(function (resolve, reject) {\n    return pm.restart(name, function (err) {\n      return err ? reject(err) : resolve();\n    });\n  });\n};\nexport var reloadApp = function reloadApp(name) {\n  return new Promise(function (resolve, reject) {\n    return pm.reload(name, function (err) {\n      return err ? reject(err) : resolve();\n    });\n  });\n};\nexport var deleteApp = function deleteApp(name) {\n  return new Promise(function (resolve, reject) {\n    return pm[\"delete\"](name, function (err) {\n      return err ? reject(err) : resolve();\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}