{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport axios from 'axios';\nimport LoginPage from '../components/LoginPage';\nexport const withAuth = Component => {\n  function login(props) {\n    const isMounted = useRef(true);\n    const {\n      0: error,\n      1: setError\n    } = useState(null);\n    const dispatch = useDispatch();\n    const {\n      authSynced,\n      client\n    } = useSelector(state => ({\n      authSynced: state.authSynced,\n      client: state.client\n    }), shallowEqual);\n    useEffect(() => {\n      if (!authSynced) {\n        axios.get('/api/me').then(({\n          data: {\n            user\n          }\n        }) => isMounted && dispatch({\n          type: 'auth',\n          client: user\n        })).catch(err => {\n          var _err$response, _err$response$data, _err$response$statusT;\n\n          if (!isMounted) {\n            return;\n          }\n\n          const msg = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message;\n          setError(msg ? [(_err$response$statusT = err.response.statusText) !== null && _err$response$statusT !== void 0 ? _err$response$statusT : 'Error', msg] : ['Error', err.toString()]);\n        });\n      }\n    }, [authSynced]);\n    return client ? __jsx(Component, props) : __jsx(LoginPage, _extends({}, props, {\n      isLoading: !authSynced && !error,\n      error: error\n    }));\n  }\n\n  ;\n  return login;\n};","map":null,"metadata":{},"sourceType":"module"}